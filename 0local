#!/usr/bin/env python

import os
import sys
import optparse
from xml.dom.minidom import parse
from version import Version

ns = "http://zero-install.sourceforge.net/2004/injector/interface"
opts = None

def delete(node):
	node.parentNode.removeChild(node)

def main(xml_file, output_path=None):
	is_url = False
	if "://" in xml_file:
		is_url = True
		import urllib
		input_file = urllib.urlopen(xml_file)
	else:
		input_file = open(xml_file)
	if output_path is None:
		if is_url:
			xml_file = xml_file.rstrip('/').rsplit('/', 1)[-1]
		base, ext = os.path.splitext(xml_file)
		output_path = base + "-local" + ext

	# parse existing feed
	dom = parse(input_file)
	implementations = dom.getElementsByTagNameNS(ns, "implementation")
	groups = dom.getElementsByTagNameNS(ns, "group")
	interface = dom.documentElement.getAttribute("uri")
	feed_for = dom.getElementsByTagNameNS(ns, "feed-for")

	# add <feed-for> if there isn't one laready
	if not feed_for:
		feed_for = dom.createElementNS(ns, "feed-for")
		feed_for.setAttribute("interface", interface)
		dom.documentElement.appendChild(feed_for)

	# make a local implementation with one version above the latest
	get_version = lambda node: node.getAttribute("version")
	try:
		last_version = max(map(get_version, implementations))
	except StandardError:
		last_version = "0.0.0"
		print >> sys.stderr, "Warning: Couldn't guess version, using %s" % (last_version,)
	
	version = Version(last_version)
	version = version.next()

	local_implementation = dom.createElementNS(ns, "implementation")
	local_implementation.setAttribute("id", opts.path)
	local_implementation.setAttribute("version", str(version))

	# clean out all existing implementations
	map(delete, implementations)

	# add implementation to the last group
	assert groups, "no <group> elements found!"
	groups[-1].appendChild(local_implementation)

	write = lambda out: dom.writexml(out)
	if output_path == '-':
		write(sys.stdout)
	else:
		with open(output_path, 'w') as output: write(output)

def configure():
	global opts
	parser = optparse.OptionParser(usage="%prog [options] feed-file output-file")
	parser.add_option("-p", "--path", default=".", help="path to implementation base (%default)")
	opts, args = parser.parse_args()
	return args

if __name__ == '__main__':
	args = configure()
	main(*args)
